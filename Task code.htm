<!DOCTYPE html>
<html lang="en">
	
<!-- the header contains information we will designate but only display on hover -->
<head>	
  	<title>html and JavaScript Assignment 1 Task</title>
  <!-- Initialize a global WBK function -->
	<script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikibase-sdk.min.js"></script>
<!-- Initialize a global wdk object using the WBK object -->
	<script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikidata-sdk.min.js"></script>
  <!-- This is a library of wikidata software development kit -->
  <!-- We have discussed the best placing of this line - 'best practice' -->
  <!-- linking directly to the latest release of d3.js for visualisation-->
	<script src="https://d3js.org/d3.v4.min.js"></script>
</head>

<!-- the next section called "body" is what we do get to see in the browser window -->
<body>
  <pre id="output"></pre>
<!-- This defines a preformatted way of displaying text -->
<!--  <pre id="outputRaw"></pre> -->
<!-- This is the beginning of a JavaScript section -->
<!-- Task : find the top 10 or so genes in Mus musculus taxon (chosen to replace E coli in original question)-->
<!-- which code for the most proteins. Choose top 14 genes which code for >= 5 proteins each, beyond that 4 proteins or fewer -->
<!-- with many genes coding for 4 proteins  -->  
  <script> 
	  //The following query in SPARQL query language to WikiData;
	  //proteins encoded by (P702) genes (instance of (P31) gene (Q7187)) found in taxon (P703) Mus musculus (Q83310)
	  //in English count proteins encoded by Mus musculus genes. 
	  //Limit to 14 highest counts.
	  
    query = `SELECT ?gene ?geneLabel ?count WITH {
               SELECT ?gene (COUNT(DISTINCT ?protein) AS ?count) WHERE{
                 ?protein wdt:P702 ?gene . ?gene wdt:P31 wd:Q7187 ;    
                        wdt:P703 wd:Q83310 . 
               } GROUP BY ?gene ORDER BY DESC(?count) LIMIT 14
             } AS %RESULTS WHERE {
               INCLUDE %RESULTS
               SERVICE wikibase:label { bd:serviceParam wikibase:language '[AUTO_LANGUAGE],en'. }
             }
            `
	
    fetch(
      wdk.sparqlQuery(query)  // "sparqlQuery" is a named function in js, "then" is used in 3 different ways hereafter;
    ).then( response => response.json() // designate a JSON object for the query result;
    ).then( wdk.simplify.sparqlResults
    ).then(
 function (response) {
      <!-- document.getElementById('output').innerHTML = \-->
        <!-- JSON.stringify(response, undefined, 2); -->
        DataJSON = response;
        DataSTRING = JSON.stringify(response, undefined, 2);
        <!-- -->
      dataset = {};
      dataset.children = DataJSON.map(function(item) { return { "Name": item.gene.label , "Count": item.count } });


        <!--  "children": [{"Name":"Olives","Count":4319},] -->


      var diameter = 400;
      var color = d3.scaleOrdinal(d3.schemeCategory20);

      var bubble = d3.pack(dataset)
          .size([diameter, diameter])
          .padding(1.5);

      var svg = d3.select("body")
          .append("svg")
          .attr("width", diameter)
          .attr("height", diameter)
          .attr("class", "bubble");

      var nodes = d3.hierarchy(dataset)
          .sum(function(d) { return d.Count; });

      var node = svg.selectAll(".node")
          .data(bubble(nodes).descendants())
          .enter()
          .filter(function(d){
              return  !d.children
          })
          .append("g")
          .attr("class", "node")
          .attr("transform", function(d) {
              return "translate(" + d.x + "," + d.y + ")";
          });

      node.append("title")
          .text(function(d) {
              return d.Name + ": " + d.Count;
          });

      node.append("circle")
          .attr("r", function(d) {
              return d.r;
          })
          .style("fill", function(d,i) {
              return color(i);
          });

      node.append("text")
          .attr("dy", ".2em")
          .style("text-anchor", "middle")
          .text(function(d) {
              return d.data.Name.substring(0, d.r / 3);
          })
          .attr("font-family", "sans-serif")
          .attr("font-size", function(d){
              return d.r/5;
          })
          .attr("fill", "white");

      node.append("text")
          .attr("dy", "1.3em")
          .style("text-anchor", "middle")
          .text(function(d) {
              return d.data.Count;
          })
          .attr("font-family",  "Gill Sans", "Gill Sans MT")
          .attr("font-size", function(d){
              return d.r/5;
          })
          .attr("fill", "white");

      d3.select(self.frameElement)
          .style("height", diameter + "px");
      /*visualisation*/
      }		
    )
  </script> 
	<!-- This is the end of a JavaScript section -->
	
</body>

</html>
